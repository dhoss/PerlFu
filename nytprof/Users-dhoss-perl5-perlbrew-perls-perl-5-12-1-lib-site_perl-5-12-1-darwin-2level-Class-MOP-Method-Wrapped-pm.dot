digraph {
graph [overlap=false]
subgraph cluster_warnings {
	label="warnings";
	"warnings::import";
}
subgraph cluster_Class_MOP_Class_Immutable_Moose_Meta_Class {
	label="Class::MOP::Class::Immutable::Moose::Meta::Class";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::class_precedence_list";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::calculate_all_roles_with_inheritance";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::get_all_attributes";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::calculate_all_roles";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::does_role";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::_method_map";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::superclasses";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::is_immutable";
	"Class::MOP::Class::Immutable::Moose::Meta::Class::linearized_isa";
}
subgraph cluster_Scalar_Util {
	label="Scalar::Util";
	"Scalar::Util::blessed";
}
subgraph cluster_UNIVERSAL {
	label="UNIVERSAL";
	"UNIVERSAL::isa";
}
subgraph cluster_Class_MOP_Method_Wrapped {
	label="Class::MOP::Method::Wrapped";
	"Class::MOP::Method::Wrapped::BEGIN@14";
	"Class::MOP::Method::Wrapped::add_around_modifier";
	"Class::MOP::Method::Wrapped::wrap";
	"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
	"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:71]";
	"Class::MOP::Method::Wrapped::BEGIN@13";
	"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:164]";
	"Class::MOP::Method::Wrapped::BEGIN@11";
	"Class::MOP::Method::Wrapped::BEGIN@10";
	"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:51]";
	"Class::MOP::Method::Wrapped::BEGIN@16";
	"Class::MOP::Method::Wrapped::_new";
	"Class::MOP::Method::Wrapped::BEGIN@3";
	"Class::MOP::Method::Wrapped::add_before_modifier";
}
subgraph cluster_Moose_Meta_Class___ANON___SERIAL_1 {
	label="Moose::Meta::Class::__ANON__::SERIAL::1";
	"Moose::Meta::Class::__ANON__::SERIAL::1::run";
}
subgraph cluster_PerlFu_JobQueue {
	label="PerlFu::JobQueue";
	"PerlFu::JobQueue::confirm";
}
subgraph cluster_PerlFu_Job {
	label="PerlFu::Job";
	"PerlFu::Job::run";
	"PerlFu::Job::name";
}
subgraph cluster_base {
	label="base";
	"base::import";
}
subgraph cluster_strict {
	label="strict";
	"strict::import";
}
subgraph cluster_Class_MOP_Class {
	label="Class::MOP::Class";
	"Class::MOP::Class::BEGIN@14";
	"Class::MOP::Class::add_around_method_modifier";
	"Class::MOP::Class::add_before_method_modifier";
	"Class::MOP::Class::__ANON__[Class/MOP/Class.pm:1072]";
}
subgraph cluster_Exporter {
	label="Exporter";
	"Exporter::import";
}
subgraph cluster_Class_MOP_Class_Immutable_Class_MOP_Class {
	label="Class::MOP::Class::Immutable::Class::MOP::Class";
	"Class::MOP::Class::Immutable::Class::MOP::Class::_method_map";
	"Class::MOP::Class::Immutable::Class::MOP::Class::get_all_attributes";
	"Class::MOP::Class::Immutable::Class::MOP::Class::get_meta_instance";
	"Class::MOP::Class::Immutable::Class::MOP::Class::class_precedence_list";
	"Class::MOP::Class::Immutable::Class::MOP::Class::linearized_isa";
	"Class::MOP::Class::Immutable::Class::MOP::Class::is_immutable";
	"Class::MOP::Class::Immutable::Class::MOP::Class::superclasses";
}
subgraph cluster_Class_MOP_Class_ {
	label="Class::MOP::Class:";
	"Class::MOP::Class:::before";
	"Class::MOP::Class:::around";
}
subgraph cluster_Class_MOP_Method {
	label="Class::MOP::Method";
	"Class::MOP::Method::body";
	"Class::MOP::Method::wrap";
}
"Class::MOP::Method::Wrapped::wrap" -> "Class::MOP::Method::wrap";
"Class::MOP::Method::Wrapped::BEGIN@13" -> "Exporter::import";
"Class::MOP::Method::Wrapped::BEGIN@14" -> "Exporter::import";
"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:51]" -> "Class::MOP::Class:::before";
"Moose::Meta::Class::__ANON__::SERIAL::1::run" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:51]";
"Class::MOP::Method::Wrapped::wrap" -> "Scalar::Util::blessed";
"Class::MOP::Class::add_before_method_modifier" -> "Class::MOP::Method::Wrapped::add_before_modifier";
"Class::MOP::Class::add_around_method_modifier" -> "Class::MOP::Method::Wrapped::add_around_modifier";
"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]" -> "Class::MOP::Class:::around";
"Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:51]" -> "PerlFu::Job::run";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@13";
"Class::MOP::Method::Wrapped::BEGIN@16" -> "base::import";
"Class::MOP::Class::Immutable::Class::MOP::Class::is_immutable" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::calculate_all_roles" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"PerlFu::Job::name" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::does_role" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::class_precedence_list" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::linearized_isa" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::is_immutable" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::linearized_isa" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::get_meta_instance" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::class_precedence_list" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::calculate_all_roles_with_inheritance" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::get_all_attributes" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::superclasses" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::_method_map" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::_method_map" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Class::MOP::Class::get_all_attributes" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Class::Immutable::Moose::Meta::Class::superclasses" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"PerlFu::JobQueue::confirm" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:162]";
"Class::MOP::Method::Wrapped::BEGIN@11" -> "warnings::import";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@14";
"Class::MOP::Method::Wrapped::BEGIN@10" -> "strict::import";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@16";
"Class::MOP::Method::wrap" -> "Class::MOP::Method::Wrapped::_new";
"Class::MOP::Method::Wrapped::add_around_modifier" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:71]";
"Class::MOP::Method::Wrapped::wrap" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:71]";
"Class::MOP::Method::Wrapped::add_before_modifier" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:71]";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@10";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@3";
"Class::MOP::Class::__ANON__[Class/MOP/Class.pm:1072]" -> "Class::MOP::Method::Wrapped::wrap";
"Class::MOP::Class::BEGIN@14" -> "Class::MOP::Method::Wrapped::BEGIN@11";
"Class::MOP::Method::Wrapped::wrap" -> "UNIVERSAL::isa";
"Class::MOP::Method::Wrapped::add_around_modifier" -> "Class::MOP::Method::Wrapped::__ANON__[Class/MOP/Method/Wrapped.pm:164]";
"Class::MOP::Method::Wrapped::wrap" -> "Class::MOP::Method::body";
}
